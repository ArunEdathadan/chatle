use import="Json"
use import="Environment"

default NO_PARALLEL_TEST_PROJECTS='${E("NO_PARALLEL_TEST_PROJECTS")}'
default KOREBUILD_TEST_DNXCORE='${E("KOREBUILD_TEST_DNXCORE")}'

@{/*

opencover
    Run opencover on unittest in your project
	
projectFile=''
    Required. Path to the test project.json to execute

coverageFile=''
	Required. Path to the coverage file

configuration='Debug'
	Optional. build configuration to use

*/}

@{
	var sourcesFiles = Files.Include("src/**/project.json").Exclude("**/bin/*/app/project.json").ToList();
	var pdbLocation = "";

	Log.Info("configuration: " + configuration);
	
	foreach (var sourceFile in sourcesFiles)
	{
		var sourceText = File.ReadAllText(sourceFile);
		var source = (JsonObject)Json.Deserialize(sourceText);
		var configs = source.ValueAsJsonObject("frameworks");
		var sourceDirectory = Path.GetDirectoryName(sourceFile);

		foreach(var framework in configs.Keys)
		{			
			pdbLocation += Path.Combine(Path.Combine(Path.Combine(sourceDirectory
				, "bin")
				, configuration)
				, framework) + ";";
		}
	}

	pdbLocation = pdbLocation.TrimEnd((char)';');
	Log.Info("pdbLocation: " + pdbLocation);

	var openCoverLocation = Path.Combine(Path.Combine(Path.Combine("packages"
		, "OpenCover")
		, "tools")
		, "OpenCover.Console.exe");

	Log.Info("openCoverLocation: " + openCoverLocation);

    var projectText = File.ReadAllText(projectFile);
    var project = (JsonObject)Json.Deserialize(projectText);

    var commands = project.ValueAsJsonObject("commands");

    if (commands != null && commands.Keys.Contains("test"))
    {
        var projectFolder = Path.GetDirectoryName(projectFile);
		Log.Info("projectFolder: " + projectFolder);
		var projectPath  = Path.Combine(projectFolder, "project.json");
		var results = Path.Combine(projectFolder, "xunit-results.xml");

		// find dnx location
		var runtime = Environment.GetEnvironmentVariable("BUILDCMD_DNX_RUNTIME");
		if (String.IsNullOrEmpty(runtime)) 
		{
			Log.Warn("BUILDCMD_DNX_RUNTIME environment variable not set.");
			runtime = "clr";
		}

		var os = IsLinux ? "mono" : "win";
		var architecture = Environment.GetEnvironmentVariable("BUILDCMD_DNX_ARCHITECTURE");
		if (String.IsNullOrEmpty(architecture)) 
		{
			Log.Warn("BUILDCMD_DNX_ARCHITECTURE environment variable not set.");
			architecture = "x86";
		}
		var dnxVersion = Environment.GetEnvironmentVariable("BUILDCMD_DNX_VERSION");
		if (String.IsNullOrEmpty(dnxVersion)) 
		{
			Log.Warn("BUILDCMD_DNX_VERSION environment variable not set.");
			dnxVersion = "1.0.0.rc1-update1";
		}

		var dnxName = string.Format("dnx-{0}-{1}-{2}.{3}", runtime, os, architecture, dnxVersion);
		Log.Info("dnxName: " + dnxName);
	
		var dnxHome = Environment.GetEnvironmentVariable("DNX_HOME");
		if (String.IsNullOrEmpty(dnxHome)) 
		{
			Log.Warn("DNX_HOME environment variable not set.");
		}

		var dnxLocation = Path.Combine(Path.Combine(Path.Combine(Path.Combine(dnxHome
			, "runtimes")
			, dnxName)
			, "bin")
			, "dnx.exe");
		
		Log.Info("dnxLocation: " + dnxLocation);

		var target = '-target:"' + dnxLocation +  '" ';
		var targetArgs = '-targetargs:"--lib ""' +  pdbLocation + '"" -p ""' + projectPath + '"" test -xml ""' + results + '"" -nologo -parallel none" ';
		var args = target + targetArgs + '-output:"' + coverageFile + '" -register:user -filter:"+[ChatLe*]* -[xunit*]*"';
        
		if (File.Exists(coverageFile))
		{
			args += " -mergeoutput";
		}

		Exec(openCoverLocation, args);
    }
}
